// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                   = require("bs-platform/lib/js/curry.js");
var $$String                = require("bs-platform/lib/js/string.js");
var Moment                  = require("moment");
var Transit                 = require("./transit.js");
var MomentRe                = require("bs-moment/lib/js/src/MomentRe.js");
var TransitJs               = require("transit-js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function make() {
  return /* () */0;
}

var writerSpec = TransitJs.makeWriteHandler({
      tag: (function () {
          return "instant";
        }),
      rep: (function () {
          return /* () */0;
        })
    });

function readerSpec() {
  return /* () */0;
}

var Instant = /* module */[
  /* make */make,
  /* writerSpec */writerSpec,
  /* readerSpec */readerSpec
];

function make$1(prim, prim$1) {
  return Moment.duration(prim, (function () {
                  switch (prim$1) {
                    case -293028842 : 
                        return "years";
                    case -103182649 : 
                        return "quarters";
                    case -949055181 : 
                        return "months";
                    case -943811073 : 
                        return "weeks";
                    case -1033676137 : 
                        return "days";
                    case 727985871 : 
                        return "hours";
                    case -740387041 : 
                        return "minutes";
                    case -628246913 : 
                        return "seconds";
                    case -952300014 : 
                        return "milliseconds";
                    
                  }
                })());
}

var writerSpec$1 = TransitJs.makeWriteHandler({
      tag: (function () {
          return "duration";
        }),
      rep: (function (duration, _) {
          return duration.toJSON();
        })
    });

function readerSpec$1(json) {
  return (function (param) {
      return Moment.duration(json, (function () {
                      switch (param) {
                        case -293028842 : 
                            return "years";
                        case -103182649 : 
                            return "quarters";
                        case -949055181 : 
                            return "months";
                        case -943811073 : 
                            return "weeks";
                        case -1033676137 : 
                            return "days";
                        case 727985871 : 
                            return "hours";
                        case -740387041 : 
                            return "minutes";
                        case -628246913 : 
                            return "seconds";
                        case -952300014 : 
                            return "milliseconds";
                        
                      }
                    })());
    });
}

var Duration = /* module */[
  /* make */make$1,
  /* writerSpec */writerSpec$1,
  /* readerSpec */readerSpec$1
];

function reader(dateStr) {
  var exit = 0;
  var match = dateStr.length;
  var switcher = match - 4 | 0;
  if (switcher > 19 || switcher < 0) {
    exit = 1;
  } else {
    switch (switcher) {
      case 0 : 
          return /* Year */0;
      case 3 : 
          return /* Month */1;
      case 6 : 
          return /* Day */2;
      case 9 : 
          return /* Hour */3;
      case 12 : 
          return /* Minute */4;
      case 15 : 
          return /* Second */5;
      case 1 : 
      case 2 : 
      case 4 : 
      case 5 : 
      case 7 : 
      case 8 : 
      case 10 : 
      case 11 : 
      case 13 : 
      case 14 : 
      case 16 : 
      case 17 : 
      case 18 : 
          exit = 1;
          break;
      case 19 : 
          return /* Millisecond */6;
      
    }
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/mjr/Documents/code/internal/libraries/timid/reason/src/time.re",
            40,
            4
          ]
        ];
  }
  
}

function truncate(length, str) {
  return $$String.sub(str, 0, length);
}

function writer(p) {
  switch (p) {
    case 0 : 
        return (function (param) {
            return $$String.sub(param, 0, 4);
          });
    case 1 : 
        return (function (param) {
            return $$String.sub(param, 0, 7);
          });
    case 2 : 
        return (function (param) {
            return $$String.sub(param, 0, 10);
          });
    case 3 : 
        return (function (param) {
            return $$String.sub(param, 0, 13);
          });
    case 4 : 
        return (function (param) {
            return $$String.sub(param, 0, 16);
          });
    case 5 : 
        return (function (param) {
            return $$String.sub(param, 0, 19);
          });
    case 6 : 
        return (function (param) {
            return $$String.sub(param, 0, 23);
          });
    
  }
}

var Precision = /* module */[
  /* reader */reader,
  /* truncate */truncate,
  /* writer */writer
];

var writerSpec$2 = TransitJs.makeWriteHandler({
      tag: (function () {
          return "moment";
        }),
      rep: (function (param, _) {
          return Curry._1(writer(param[/* precision */0]), param[/* moment */1].toJSON());
        })
    });

function readerSpec$2(moment) {
  return /* record */[
          /* precision */reader(moment),
          /* moment */Moment(moment)
        ];
}

var Moment$1 = /* module */[
  /* make */MomentRe.moment,
  /* writerSpec */writerSpec$2,
  /* readerSpec */readerSpec$2
];

var writerSpec$3 = TransitJs.makeWriteHandler({
      tag: (function () {
          return "interval";
        }),
      rep: (function (param, _) {
          return /* tuple */[
                  param[/* moment */0],
                  param[/* duration */1]
                ];
        })
    });

function readerSpec$3(param) {
  return /* record */[
          /* moment */param[0],
          /* duration */param[1]
        ];
}

var Interval = /* module */[
  /* writerSpec */writerSpec$3,
  /* readerSpec */readerSpec$3
];

var reader$1 = Transit.reader(/* None */0, {
      handlers: {
        instant: readerSpec,
        duration: readerSpec$1,
        moment: readerSpec$2,
        interval: readerSpec$3
      }
    });

var eta = TransitJs.map(/* tuple */[
      "Instant",
      writerSpec,
      "Duration",
      writerSpec$1,
      "Moment",
      writerSpec$2,
      "Interval",
      writerSpec$3
    ]);

var writer$1 = Transit.writer(/* None */0, eta);

function write(v) {
  return writer$1.write(v);
}

function read(v) {
  return reader$1.read(v);
}

var encodedInstant = writer$1.write(/* () */0);

var encodedDuration = writer$1.write(Moment.duration(1, "days"));

var encodedMoment = writer$1.write(MomentRe.moment(/* None */0, "2017"));

var decodedInstant = reader$1.read(encodedInstant);

var decodedDuration = reader$1.read(encodedDuration);

var decodedMoment = reader$1.read(encodedMoment);

exports.Instant         = Instant;
exports.Duration        = Duration;
exports.Precision       = Precision;
exports.Moment          = Moment$1;
exports.Interval        = Interval;
exports.reader          = reader$1;
exports.writer          = writer$1;
exports.write           = write;
exports.read            = read;
exports.encodedInstant  = encodedInstant;
exports.encodedDuration = encodedDuration;
exports.encodedMoment   = encodedMoment;
exports.decodedInstant  = decodedInstant;
exports.decodedDuration = decodedDuration;
exports.decodedMoment   = decodedMoment;
/* writerSpec Not a pure module */
