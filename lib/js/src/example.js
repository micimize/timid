// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Transit        = require("./transit.js");
var TransitJs      = require("transit-js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

function make(x, y) {
  return /* record */[
          /* x */x,
          /* y */y
        ];
}

var writerSpec = TransitJs.makeWriteHandler({
      tag: (function () {
          return "coord";
        }),
      rep: (function (param, _) {
          return /* tuple */[
                  param[/* x */0],
                  param[/* y */1]
                ];
        })
    });

function readerSpec(param) {
  return /* record */[
          /* x */param[0],
          /* y */param[1]
        ];
}

var Coordinate = /* module */[
  /* make */make,
  /* writerSpec */writerSpec,
  /* readerSpec */readerSpec
];

function make$1(width, height) {
  return /* record */[
          /* width */width,
          /* height */height
        ];
}

var writerSpec$1 = TransitJs.makeWriteHandler({
      tag: (function () {
          return "size";
        }),
      rep: (function (v, _) {
          return /* tuple */[
                  v[/* width */0],
                  v[/* height */1]
                ];
        })
    });

function readerSpec$1(param) {
  return /* record */[
          /* width */param[0],
          /* height */param[1]
        ];
}

var Size = /* module */[
  /* make */make$1,
  /* writerSpec */writerSpec$1,
  /* readerSpec */readerSpec$1
];

var $$class = CamlinternalOO.create_table([
      "rep",
      "tag"
    ]);

var ids = CamlinternalOO.get_method_labels($$class, [
      "tag",
      "rep"
    ]);

var tag = ids[0];

var rep = ids[1];

CamlinternalOO.set_methods($$class, /* array */[
      tag,
      (function (_, _$1) {
          return "lang";
        }),
      rep,
      (function (_, v, _$1) {
          switch (v) {
            case 0 : 
                return 0;
            case 1 : 
                return 1;
            case 2 : 
                return 3;
            
          }
        })
    ]);

CamlinternalOO.init_class($$class);

var writerSpec$2 = CamlinternalOO.create_object_opt(0, $$class);

function readerSpec$2(rep) {
  if (rep !== 0) {
    if (rep !== 1) {
      return /* Other */2;
    } else {
      return /* Lisp */1;
    }
  } else {
    return /* Ocaml */0;
  }
}

var Language = /* module */[
  /* writerSpec */writerSpec$2,
  /* readerSpec */readerSpec$2
];

function make$2(origin, size) {
  return /* record */[
          /* origin */origin,
          /* size */size
        ];
}

var writerSpec$3 = TransitJs.makeWriteHandler({
      tag: (function () {
          return "coord";
        }),
      rep: (function (param, _) {
          return /* tuple */[
                  param[/* origin */0],
                  param[/* size */1]
                ];
        })
    });

function readerSpec$3(param) {
  return /* record */[
          /* origin */param[0],
          /* size */param[1]
        ];
}

var Rectangle = /* module */[
  /* make */make$2,
  /* writerSpec */writerSpec$3,
  /* readerSpec */readerSpec$3
];

var reader = Transit.reader(/* None */0, {
      handlers: {
        point: readerSpec,
        size: writerSpec$1
      }
    });

var eta = TransitJs.map(/* tuple */[
      "Coordinate",
      writerSpec,
      "Size",
      writerSpec$1,
      "Language",
      writerSpec$2,
      "Rectangle",
      writerSpec$3
    ]);

var writer = Transit.writer(/* None */0, eta);

var encodedCoordinate = writer.write(/* record */[
      /* x */8,
      /* y */8
    ]);

var encodedSize = writer.write(/* record */[
      /* width */5,
      /* height */5
    ]);

var encodedLanguage = writer.write(/* Ocaml */0);

var encodedRectangle = writer.write(/* record */[
      /* origin : record */[
        /* x */0,
        /* y */0
      ],
      /* size : record */[
        /* width */10,
        /* height */10
      ]
    ]);

var coordinate = reader.read(encodedCoordinate);

var size = reader.read(encodedSize);

var lang = reader.read(encodedLanguage);

var rect = reader.read(encodedRectangle);

switch (lang) {
  case 0 : 
      console.log("OCaml!!!");
      break;
  case 1 : 
      console.log("The most intelligent way to misuse a computer");
      break;
  case 2 : 
      console.log("other stuff");
      break;
  
}

exports.Coordinate        = Coordinate;
exports.Size              = Size;
exports.Language          = Language;
exports.Rectangle         = Rectangle;
exports.reader            = reader;
exports.writer            = writer;
exports.encodedCoordinate = encodedCoordinate;
exports.encodedSize       = encodedSize;
exports.encodedLanguage   = encodedLanguage;
exports.encodedRectangle  = encodedRectangle;
exports.coordinate        = coordinate;
exports.size              = size;
exports.lang              = lang;
exports.rect              = rect;
/* writerSpec Not a pure module */
